%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8%%For: (Robert S SIXPack) (SIXPack)%%Title: (BMBF_CMYK_Gef_M.eps)%%CreationDate: (7/28/04) (12:07 PM)%%BoundingBox: 213 369 382 497%%HiResBoundingBox: 213.708 369.9829 381.7446 496.3955%%DocumentProcessColors: Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Passermarken])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.504 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 297.5 420.5 297.5 420.5%AI3_TileBox: 29 31 567 812%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 595 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: 159.5 528.5 2 1010 721 26 0 1 7 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:29 31%%AI3_PaperRect:-29 812 566 -30%%AI3_Margin:29 -31 -28 30%AI7_GridSettings: 28.3465 8 28.3465 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_BeginPalette0 0 Pb1 1 1 1 ([Passermarken]) 0 Xs([Passermarken]) Pc1 1 1 1 k(C=100 M=100 Y=100 K=100) Pc(C=100 M=100 Y=100 K=100) Pc(C=100 M=100 Y=100 K=100) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Angleichungen-Zusatzmodul) (Angleichungen)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Musterpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Bildpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (R\237ckg\212ngig: Neuer Kalligraphiepinsel) (Kalligraphiepinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Spezialpinsel-Zusatzmodul) (Spezialpinsel-Werkzeug)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Ebene 1) Ln0 Auu1 O0 0 0 1 k300 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR272.5337 420.9043 m272.5337 419.9639 271.917 419.5947 271.4248 419.5947 c270.7749 419.5947 270.4609 420.0537 270.4609 420.7363 c270.4609 424.6572 l269.543 424.6572 l269.543 420.3447 l269.543 419.3818 270.0801 418.8887 271.0664 418.8887 c271.6592 418.8887 272.1973 419.1689 272.5 419.6836 c272.5337 419.6836 l272.5337 419.001 l273.5078 419.001 l273.4741 419.3936 273.4517 419.7852 273.4517 420.1768 c273.4517 424.6572 l272.5337 424.6572 l272.5337 420.9043 l272.5337 420.9043 lf279.0972 419.001 m279.0972 422.9209 l279.0972 424.041 278.7944 424.7686 277.585 424.7686 c276.8564 424.7686 276.4307 424.5674 276.0728 423.9287 c276.0288 423.9287 l276.0288 424.6572 l275.0537 424.6572 l275.0874 424.2646 275.1089 423.874 275.1089 423.4805 c275.1089 419.001 l276.0288 419.001 l276.0288 422.3506 l276.0288 423.123 276.1738 424.0186 277.1816 424.0186 c277.9653 424.0186 278.1782 423.5254 278.1782 422.9209 c278.1782 419.001 l279.0972 419.001 l279.0972 419.001 lf*u283.6104 422.0586 m283.6104 420.917 283.6104 419.6387 282.5801 419.6387 c281.4268 419.6387 281.4268 420.8721 281.4268 421.7227 c281.4268 423.2344 281.562 424.0186 282.5474 424.0186 c283.5654 424.0186 283.6104 422.8086 283.6104 422.0586 c283.6104 422.0586 lf1 D283.6104 424.0869 m283.5776 424.0869 l283.2632 424.5332 282.8716 424.7686 282.3345 424.7686 c280.5083 424.7686 280.4639 423.1455 280.4639 421.7334 c280.4639 419.2471 281.3818 418.8887 282.2896 418.8887 c282.8828 418.8887 283.2744 419.1465 283.5879 419.6738 c283.6104 419.6738 l283.6104 419.001 l284.5288 419.001 l284.5288 427.0869 l283.6104 427.0869 l283.6104 424.0869 l283.6104 424.0869 lf*U0 D289.4229 419.001 m289.4229 422.6973 l292.2456 422.6973 l292.2456 423.5938 l289.4229 423.5938 l289.4229 426.1924 l292.4014 426.1924 l292.4014 427.0869 l288.3916 427.0869 l288.3916 419.001 l289.4229 419.001 l289.4229 419.001 lf*u295.2222 419.6387 m294.2695 419.6387 294.0342 420.2998 294.0342 422.1377 c294.0342 423.6836 294.5151 424.0186 295.2222 424.0186 c295.9272 424.0186 296.4092 423.6836 296.4092 422.1377 c296.4092 420.2998 296.1738 419.6387 295.2222 419.6387 c295.2222 419.6387 lf1 D295.2222 418.8887 m296.4204 418.8887 297.3716 419.2471 297.3716 421.7451 c297.3716 423.4033 297.1816 424.7686 295.2222 424.7686 c293.2617 424.7686 293.0713 423.4033 293.0713 421.7451 c293.0713 419.2471 294.0229 418.8887 295.2222 418.8887 c295.2222 418.8887 lf*U0 D299.7246 424.6572 m298.8066 424.6572 l298.8066 419.001 l299.7246 419.001 l299.7246 422.3379 l299.7246 423.1006 299.9824 423.874 301 423.874 c301.168 423.874 301.3262 423.8389 301.4941 423.8164 c301.4941 424.7686 l300.5977 424.7686 300.1289 424.6689 299.748 423.8057 c299.7246 423.8057 l299.7246 424.6572 l299.7246 424.6572 lf306.0801 420.6143 m306.0801 422.3379 303.2559 422.3164 303.2559 423.3135 c303.2559 423.8057 303.6387 424.0742 304.1309 424.0742 c304.7129 424.0742 305.0273 423.7607 305.0156 423.168 c306.0352 423.168 l306.1133 424.2871 305.252 424.7686 304.2441 424.7686 c302.6523 424.7686 302.293 423.8164 302.293 423.2236 c302.293 421.5322 305.1172 421.5098 305.1172 420.502 c305.1172 419.9189 304.6914 419.6387 304.1406 419.6387 c303.2129 419.6387 303.2012 420.4014 303.2012 420.7256 c302.1602 420.7256 l302.125 419.4268 302.8887 418.8887 304.1094 418.8887 c305.2285 418.8887 306.0801 419.3701 306.0801 420.6143 c306.0801 420.6143 lf311.1504 422.8438 m311.207 424.1094 310.5449 424.7686 309.4141 424.7686 c307.4551 424.7686 307.2637 423.4033 307.2637 421.7451 c307.2637 419.2471 308.2168 418.8887 309.4141 418.8887 c310.043 418.8887 311.2305 419.292 311.1953 420.8828 c310.2324 420.8828 l310.2656 419.8633 309.627 419.6387 309.4141 419.6387 c308.4629 419.6387 308.2285 420.2998 308.2285 422.1377 c308.2285 423.6836 308.709 424.0186 309.4141 424.0186 c309.7617 424.0186 310.2207 423.7715 310.1992 422.8438 c311.1504 422.8438 l311.1504 422.8438 lf316.6602 419.001 m316.6602 423.0107 l316.6602 424.2871 316.123 424.7686 315.1602 424.7686 c314.4219 424.7686 313.9961 424.5898 313.627 423.9287 c313.582 423.9287 l313.582 427.0869 l312.6641 427.0869 l312.6641 419.001 l313.582 419.001 l313.582 422.3281 l313.582 423.2793 313.8164 424.0186 314.7344 424.0186 c315.5195 424.0186 315.7422 423.5254 315.7422 422.8311 c315.7422 419.001 l316.6602 419.001 l316.6602 419.001 lf321.2988 420.9043 m321.2988 419.9639 320.6836 419.5947 320.1895 419.5947 c319.5391 419.5947 319.2266 420.0537 319.2266 420.7363 c319.2266 424.6572 l318.3086 424.6572 l318.3086 420.3447 l318.3086 419.3818 318.8457 418.8887 319.832 418.8887 c320.4258 418.8887 320.9629 419.1689 321.2656 419.6836 c321.2988 419.6836 l321.2988 419.001 l322.2734 419.001 l322.2383 419.3936 322.2168 419.7852 322.2168 420.1768 c322.2168 424.6572 l321.2988 424.6572 l321.2988 420.9043 l321.2988 420.9043 lf327.8613 419.001 m327.8613 422.9209 l327.8613 424.041 327.5586 424.7686 326.3496 424.7686 c325.623 424.7686 325.1973 424.5674 324.8379 423.9287 c324.793 423.9287 l324.793 424.6572 l323.8203 424.6572 l323.8516 424.2646 323.875 423.874 323.875 423.4805 c323.875 419.001 l324.793 419.001 l324.793 422.3506 l324.793 423.123 324.9395 424.0186 325.9473 424.0186 c326.7305 424.0186 326.9434 423.5254 326.9434 422.9209 c326.9434 419.001 l327.8613 419.001 l327.8613 419.001 lf*u332.3984 421.8574 m332.3984 421.0723 332.4316 419.7627 331.3242 419.7627 c330.6406 419.7627 330.2246 420.1875 330.2246 422.002 c330.2246 422.7529 330.2598 424.0068 331.3008 424.0068 c332.4531 424.0068 332.3984 422.6973 332.3984 421.8574 c332.3984 421.8574 lf1 D332.377 423.9629 m332.3535 423.9629 l332.0957 424.5107 331.627 424.7686 331.0332 424.7686 c330.5742 424.7686 329.2637 424.6016 329.2637 422.002 c329.2637 420.3223 329.5645 419.001 331.0996 419.001 c331.5918 419.001 332.1074 419.2588 332.3418 419.7061 c332.377 419.7061 l332.377 418.5303 l332.377 417.9482 332.0293 417.5557 331.3906 417.5557 c330.8867 417.5557 330.5391 417.8467 330.5293 418.374 c329.498 418.374 l329.4199 417.332 330.2715 416.8623 331.2109 416.8623 c332.4531 416.8623 333.2949 417.1641 333.2949 418.4297 c333.2949 424.6572 l332.377 424.6572 l332.377 423.9629 l332.377 423.9629 lf*U0 D269.1401 436.6572 m269.1401 435.9629 l270.0127 435.9629 l270.0127 431.001 l270.9316 431.001 l270.9316 435.9629 l272.0742 435.9629 l272.0742 436.6572 l270.9316 436.6572 l270.9316 437.6201 l270.9316 438.0791 271.0991 438.4941 272.0742 438.4277 c272.0742 439.0869 l271.9395 439.1104 271.8267 439.1211 271.6362 439.1211 c270.8188 439.1211 270.0127 438.8975 270.0127 437.7539 c270.0127 436.6572 l269.1401 436.6572 l269.1401 436.6572 lf*u274.4902 438.7734 m273.4375 438.7734 l273.4375 437.6094 l274.4902 437.6094 l274.4902 438.7734 l274.4902 438.7734 lf1 D276.4619 438.7734 m275.4082 438.7734 l275.4082 437.6094 l276.4619 437.6094 l276.4619 438.7734 l276.4619 438.7734 lf275.98 432.9043 m275.98 431.9639 275.3638 431.5947 274.8706 431.5947 c274.2222 431.5947 273.9082 432.0547 273.9082 432.7363 c273.9082 436.6572 l272.9893 436.6572 l272.9893 432.3447 l272.9893 431.3818 273.5273 430.8887 274.5127 430.8887 c275.106 430.8887 275.6436 431.1689 275.9463 431.6836 c275.98 431.6836 l275.98 431.001 l276.9541 431.001 l276.9214 431.3936 276.8989 431.7852 276.8989 432.1768 c276.8989 436.6572 l275.98 436.6572 l275.98 432.9043 l275.98 432.9043 lf*U0 D279.5078 436.6572 m278.5898 436.6572 l278.5898 431.001 l279.5078 431.001 l279.5078 434.3379 l279.5078 435.1006 279.7656 435.874 280.7856 435.874 c280.9536 435.874 281.1089 435.8389 281.2778 435.8164 c281.2778 436.7686 l280.3813 436.7686 279.9106 436.6689 279.5303 435.8057 c279.5078 435.8057 l279.5078 436.6572 l279.5078 436.6572 lf*u285.1011 434.7861 m286.1987 434.7861 l287.2515 434.7861 288.0454 434.5635 288.0454 433.2744 c288.0454 432.6816 287.6548 431.8965 286.5566 431.8965 c285.1011 431.8965 l285.1011 434.7861 l285.1011 434.7861 lf285.1011 438.1924 m286.5566 438.1924 l287.4194 438.1924 287.7998 437.6426 287.7998 436.9717 c287.7998 436.1865 287.4082 435.6934 286.6021 435.6836 c285.1011 435.6836 l285.1011 438.1924 l285.1011 438.1924 lf1 D286.6694 431.001 m287.5869 431.001 289.0981 431.2021 289.0981 433.2744 c289.0981 434.3828 288.5947 435.0781 287.4419 435.2129 c287.4419 435.2676 l288.4834 435.5029 288.8301 436.1758 288.8301 437.1846 c288.8301 437.3398 288.7852 437.8213 288.5049 438.2598 c288.2031 438.707 287.8223 439.0869 286.7021 439.0869 c284.0708 439.0869 l284.0708 431.001 l286.6694 431.001 l286.6694 431.001 lf*U*u291.4907 436.6572 m290.5723 436.6572 l290.5723 431.001 l291.4907 431.001 l291.4907 436.6572 l291.4907 436.6572 lf290.5166 438.1025 m291.5474 438.1025 l291.5474 439.0869 l290.5166 439.0869 l290.5166 438.1025 l290.5166 438.1025 lf*U0 D294.0879 439.0869 m293.1699 439.0869 l293.1699 431.001 l294.0879 431.001 l294.0879 439.0869 l294.0879 439.0869 lf*u298.668 434.0586 m298.668 432.917 298.668 431.6387 297.6372 431.6387 c296.4829 431.6387 296.4829 432.8721 296.4829 433.7227 c296.4829 435.2344 296.6182 436.0186 297.6035 436.0186 c298.623 436.0186 298.668 434.8086 298.668 434.0586 c298.668 434.0586 lf1 D298.668 436.0869 m298.6328 436.0869 l298.3203 436.5332 297.9287 436.7686 297.3906 436.7686 c295.5654 436.7686 295.52 435.1455 295.52 433.7334 c295.52 431.2471 296.439 430.8887 297.3457 430.8887 c297.9399 430.8887 298.3311 431.1465 298.6465 431.6738 c298.668 431.6738 l298.668 431.001 l299.5859 431.001 l299.5859 439.0869 l298.668 439.0869 l298.668 436.0869 l298.668 436.0869 lf*U0 D304.3027 432.9043 m304.3027 431.9639 303.6855 431.5947 303.1934 431.5947 c302.543 431.5947 302.2305 432.0547 302.2305 432.7363 c302.2305 436.6572 l301.3105 436.6572 l301.3105 432.3447 l301.3105 431.3818 301.8477 430.8887 302.834 430.8887 c303.4277 430.8887 303.9668 431.1689 304.2676 431.6836 c304.3027 431.6836 l304.3027 431.001 l305.2754 431.001 l305.2422 431.3936 305.2188 431.7852 305.2188 432.1768 c305.2188 436.6572 l304.3027 436.6572 l304.3027 432.9043 l304.3027 432.9043 lf310.8652 431.001 m310.8652 434.9209 l310.8652 436.041 310.5625 436.7686 309.3535 436.7686 c308.625 436.7686 308.1992 436.5674 307.8418 435.9287 c307.7949 435.9287 l307.7949 436.6572 l306.8223 436.6572 l306.8555 436.2646 306.8789 435.874 306.8789 435.4805 c306.8789 431.001 l307.7949 431.001 l307.7949 434.3506 l307.7949 435.123 307.9414 436.0186 308.9492 436.0186 c309.7344 436.0186 309.9473 435.5254 309.9473 434.9209 c309.9473 431.001 l310.8652 431.001 l310.8652 431.001 lf*u315.4023 433.8574 m315.4023 433.0723 315.4355 431.7627 314.3262 431.7627 c313.6426 431.7627 313.2285 432.1875 313.2285 434.002 c313.2285 434.7529 313.2617 436.0068 314.3047 436.0068 c315.457 436.0068 315.4023 434.6973 315.4023 433.8574 c315.4023 433.8574 lf1 D315.3789 435.9629 m315.3574 435.9629 l315.0996 436.5107 314.6289 436.7686 314.0352 436.7686 c313.5762 436.7686 312.2656 436.6016 312.2656 434.002 c312.2656 432.3223 312.5684 431.001 314.1016 431.001 c314.5938 431.001 315.1094 431.2588 315.3457 431.7061 c315.3789 431.7061 l315.3789 430.5313 l315.3789 429.9482 315.0313 429.5557 314.3945 429.5557 c313.8887 429.5557 313.541 429.8477 313.5313 430.374 c312.5 430.374 l312.4219 429.333 313.2734 428.8623 314.2148 428.8623 c315.457 428.8623 316.2969 429.1641 316.2969 430.4297 c316.2969 436.6572 l315.3789 436.6572 l315.3789 435.9629 l315.3789 435.9629 lf*U*u0 D270.6079 446.7861 m271.7061 446.7861 l272.7588 446.7861 273.5537 446.5635 273.5537 445.2744 c273.5537 444.6816 273.1616 443.8965 272.0649 443.8965 c270.6079 443.8965 l270.6079 446.7861 l270.6079 446.7861 lf270.6079 450.1924 m272.0649 450.1924 l272.9263 450.1924 273.3081 449.6426 273.3081 448.9717 c273.3081 448.1865 272.915 447.6934 272.1079 447.6836 c270.6079 447.6836 l270.6079 450.1924 l270.6079 450.1924 lf1 D272.1753 443.001 m273.0952 443.001 274.6064 443.2021 274.6064 445.2744 c274.6064 446.3828 274.103 447.0781 272.9487 447.2129 c272.9487 447.2676 l273.9907 447.5029 274.3384 448.1758 274.3384 449.1846 c274.3384 449.3398 274.2935 449.8213 274.0132 450.2598 c273.7114 450.707 273.3306 451.0869 272.2104 451.0869 c269.5776 451.0869 l269.5776 443.001 l272.1753 443.001 l272.1753 443.001 lf*U0 D278.937 444.9043 m278.937 443.9639 278.3198 443.5947 277.8267 443.5947 c277.1782 443.5947 276.8638 444.0547 276.8638 444.7363 c276.8638 448.6572 l275.9463 448.6572 l275.9463 444.3447 l275.9463 443.3818 276.4834 442.8887 277.4688 442.8887 c278.062 442.8887 278.6001 443.1689 278.9019 443.6836 c278.937 443.6836 l278.937 443.001 l279.9097 443.001 l279.877 443.3936 279.8545 443.7852 279.8545 444.1768 c279.8545 448.6572 l278.937 448.6572 l278.937 444.9043 l278.937 444.9043 lf285.5005 443.001 m285.5005 446.9209 l285.5005 448.041 285.1973 448.7686 283.9873 448.7686 c283.2598 448.7686 282.834 448.5674 282.4761 447.9287 c282.4307 447.9287 l282.4307 448.6572 l281.4565 448.6572 l281.4907 448.2646 281.5132 447.874 281.5132 447.4805 c281.5132 443.001 l282.4307 443.001 l282.4307 446.3506 l282.4307 447.123 282.5762 448.0186 283.585 448.0186 c284.3687 448.0186 284.5815 447.5254 284.5815 446.9209 c284.5815 443.001 l285.5005 443.001 l285.5005 443.001 lf*u290.0132 446.0586 m290.0132 444.917 290.0132 443.6387 288.9829 443.6387 c287.8301 443.6387 287.8301 444.8721 287.8301 445.7227 c287.8301 447.2344 287.9639 448.0186 288.9502 448.0186 c289.9683 448.0186 290.0132 446.8086 290.0132 446.0586 c290.0132 446.0586 lf1 D290.0132 448.0869 m289.9805 448.0869 l289.6675 448.5332 289.2744 448.7686 288.7373 448.7686 c286.9111 448.7686 286.8662 447.1455 286.8662 445.7334 c286.8662 443.2471 287.7847 442.8887 288.6924 442.8887 c289.2856 442.8887 289.6777 443.1465 289.9907 443.6738 c290.0132 443.6738 l290.0132 443.001 l290.9321 443.001 l290.9321 451.0869 l290.0132 451.0869 l290.0132 448.0869 l290.0132 448.0869 lf*U*u0 D293.3066 446.2266 m293.3179 447.7939 293.7998 448.0742 294.3823 448.0742 c295.0532 448.0742 295.5137 447.874 295.5137 446.2266 c293.3066 446.2266 l293.3066 446.2266 lf1 D296.4878 445.5322 m296.4878 446.0137 l296.4878 447.8838 296.0835 448.7686 294.4722 448.7686 c292.5117 448.7686 292.3213 447.4033 292.3213 445.7451 c292.3213 443.2471 293.2729 442.8887 294.4722 442.8887 c295.6592 442.8887 296.4316 443.46 296.4429 444.7139 c295.4351 444.7139 l295.4014 444.1445 295.0757 443.6387 294.4497 443.6387 c293.7324 443.6387 293.3066 443.9531 293.3066 445.5322 c296.4878 445.5322 l296.4878 445.5322 lf*U0 D301.5508 444.6143 m301.5508 446.3379 298.7285 446.3164 298.7285 447.3135 c298.7285 447.8057 299.1094 448.0742 299.6016 448.0742 c300.1836 448.0742 300.498 447.7607 300.4863 447.168 c301.5059 447.168 l301.584 448.2871 300.7207 448.7686 299.7129 448.7686 c298.123 448.7686 297.7646 447.8164 297.7646 447.2236 c297.7646 445.5322 300.5879 445.5098 300.5879 444.502 c300.5879 443.9189 300.1621 443.6387 299.6133 443.6387 c298.6836 443.6387 298.6719 444.4014 298.6719 444.7256 c297.6304 444.7256 l297.5967 443.4268 298.3574 442.8887 299.5801 442.8887 c300.6992 442.8887 301.5508 443.3711 301.5508 444.6143 c301.5508 444.6143 lf306.6777 443.001 m306.6777 446.8086 l306.6777 447.0215 306.7207 447.582 306.9922 447.8057 c307.2363 448.0068 307.3379 448.0186 307.6855 448.0186 c308.4258 448.0186 308.582 447.4922 308.582 446.9209 c308.582 443.001 l309.5 443.001 l309.5 447.3018 l309.5 448.6348 308.5469 448.7686 307.9551 448.7686 c307.4395 448.7686 306.9238 448.6465 306.6113 448.041 c306.3965 448.5557 305.8027 448.7686 305.2891 448.7686 c304.6289 448.7686 304.1465 448.5557 303.8789 447.9512 c303.8555 447.9512 l303.8555 448.6572 l302.8809 448.6572 l302.9141 448.2646 302.9375 447.874 302.9375 447.4805 c302.9375 443.001 l303.8555 443.001 l303.8555 446.8086 l303.8555 447.0215 303.9004 447.3584 304.0684 447.6387 c304.2031 447.8516 304.584 448.0186 304.8633 448.0186 c305.6035 448.0186 305.7578 447.4922 305.7578 446.9209 c305.7578 443.001 l306.6777 443.001 l306.6777 443.001 lf*u1 D312.041 448.6572 m311.123 448.6572 l311.123 443.001 l312.041 443.001 l312.041 448.6572 l312.041 448.6572 lf0 D311.0664 450.1025 m312.0977 450.1025 l312.0977 451.0869 l311.0664 451.0869 l311.0664 450.1025 l311.0664 450.1025 lf*U317.6953 443.001 m317.6953 446.9209 l317.6953 448.041 317.3945 448.7686 316.1836 448.7686 c315.4551 448.7686 315.0313 448.5674 314.6719 447.9287 c314.627 447.9287 l314.627 448.6572 l313.6523 448.6572 l313.6855 448.2646 313.707 447.874 313.707 447.4805 c313.707 443.001 l314.627 443.001 l314.627 446.3506 l314.627 447.123 314.7734 448.0186 315.7813 448.0186 c316.5645 448.0186 316.7773 447.5254 316.7773 446.9209 c316.7773 443.001 l317.6953 443.001 l317.6953 443.001 lf*u1 D320.2383 448.6572 m319.3203 448.6572 l319.3203 443.001 l320.2383 443.001 l320.2383 448.6572 l320.2383 448.6572 lf319.2637 450.1025 m320.293 450.1025 l320.293 451.0869 l319.2637 451.0869 l319.2637 450.1025 l319.2637 450.1025 lf*U0 D325.457 444.6143 m325.457 446.3379 322.6328 446.3164 322.6328 447.3135 c322.6328 447.8057 323.0137 448.0742 323.5059 448.0742 c324.0898 448.0742 324.4043 447.7607 324.3906 447.168 c325.4121 447.168 l325.4902 448.2871 324.627 448.7686 323.6191 448.7686 c322.0293 448.7686 321.6699 447.8164 321.6699 447.2236 c321.6699 445.5322 324.4941 445.5098 324.4941 444.502 c324.4941 443.9189 324.0664 443.6387 323.5195 443.6387 c322.5879 443.6387 322.5781 444.4014 322.5781 444.7256 c321.5352 444.7256 l321.5039 443.4268 322.2637 442.8887 323.4863 442.8887 c324.6035 442.8887 325.457 443.3711 325.457 444.6143 c325.457 444.6143 lf326.0703 448.6572 m326.0703 447.9629 l326.998 447.9629 l326.998 443.9414 l326.998 443.292 327.3906 442.9336 328.2637 442.9336 c328.5664 442.9336 328.8691 443.001 329.1719 443.0244 c329.1719 443.7285 l328.9707 443.7061 328.8242 443.6836 328.7578 443.6836 c327.918 443.6836 327.918 444.1445 327.918 444.502 c327.918 447.9629 l329.1484 447.9629 l329.1484 448.6572 l327.918 448.6572 l327.918 450.1572 l326.998 449.7441 l326.998 448.6572 l326.0703 448.6572 l326.0703 448.6572 lf*u330.9043 446.2266 m330.916 447.7939 331.3965 448.0742 331.9805 448.0742 c332.6523 448.0742 333.1113 447.874 333.1113 446.2266 c330.9043 446.2266 l330.9043 446.2266 lf1 D334.0859 445.5322 m334.0859 446.0137 l334.0859 447.8838 333.6836 448.7686 332.0703 448.7686 c330.1094 448.7686 329.9199 447.4033 329.9199 445.7451 c329.9199 443.2471 330.8711 442.8887 332.0703 442.8887 c333.2559 442.8887 334.0293 443.46 334.041 444.7139 c333.0332 444.7139 l332.998 444.1445 332.6758 443.6387 332.0488 443.6387 c331.3301 443.6387 330.9043 443.9531 330.9043 445.5322 c334.0859 445.5322 l334.0859 445.5322 lf*U0 D336.3594 448.6572 m335.4414 448.6572 l335.4414 443.001 l336.3594 443.001 l336.3594 446.3379 l336.3594 447.1006 336.6172 447.874 337.6367 447.874 c337.8047 447.874 337.9609 447.8389 338.1289 447.8164 c338.1289 448.7686 l337.2324 448.7686 336.7637 448.6689 336.3828 447.8057 c336.3594 447.8057 l336.3594 448.6572 l336.3594 448.6572 lf*u1 D340.0273 448.6572 m339.1074 448.6572 l339.1074 443.001 l340.0273 443.001 l340.0273 448.6572 l340.0273 448.6572 lf339.0527 450.1025 m340.084 450.1025 l340.084 451.0869 l339.0527 451.0869 l339.0527 450.1025 l339.0527 450.1025 lf*U0 D344.6387 444.9043 m344.6387 443.9639 344.0254 443.5947 343.5313 443.5947 c342.8809 443.5947 342.5684 444.0547 342.5684 444.7363 c342.5684 448.6572 l341.6504 448.6572 l341.6504 444.3447 l341.6504 443.3818 342.1875 442.8887 343.1738 442.8887 c343.7676 442.8887 344.3047 443.1689 344.6074 443.6836 c344.6387 443.6836 l344.6387 443.001 l345.6152 443.001 l345.5801 443.3936 345.5586 443.7852 345.5586 444.1768 c345.5586 448.6572 l344.6387 448.6572 l344.6387 444.9043 l344.6387 444.9043 lf350.9453 443.001 m350.9453 446.8086 l350.9453 447.0215 350.9902 447.582 351.2598 447.8057 c351.5059 448.0068 351.6055 448.0186 351.9531 448.0186 c352.6934 448.0186 352.8496 447.4922 352.8496 446.9209 c352.8496 443.001 l353.7695 443.001 l353.7695 447.3018 l353.7695 448.6348 352.8164 448.7686 352.2227 448.7686 c351.707 448.7686 351.1934 448.6465 350.8789 448.041 c350.666 448.5557 350.0723 448.7686 349.5566 448.7686 c348.8965 448.7686 348.4141 448.5557 348.1465 447.9512 c348.123 447.9512 l348.123 448.6572 l347.1484 448.6572 l347.1836 448.2646 347.2051 447.874 347.2051 447.4805 c347.2051 443.001 l348.123 443.001 l348.123 446.8086 l348.123 447.0215 348.168 447.3584 348.3359 447.6387 c348.4707 447.8516 348.8516 448.0186 349.1328 448.0186 c349.8691 448.0186 350.0273 447.4922 350.0273 446.9209 c350.0273 443.001 l350.9453 443.001 l350.9453 443.001 lf0 O0 0.12 1 0.05 k258.9482 411 m262.4912 411 l262.4912 390.999 l258.9482 390.999 l258.9482 411 l258.9482 411 lf0 1 1 0 k258.9482 431.0703 m262.4912 431.0703 l262.4912 411 l258.9482 411 l258.9482 431.0703 l258.9482 431.0703 lf1 O0 0 0 1 k258.9482 451 m262.4912 451 l262.4912 431.001 l258.9482 431.001 l258.9482 451 l258.9482 451 lf*u1 D238.7163 430.9971 m238.7163 430.9971 l238.7163 430.9971 lf238.7173 430.9883 m238.7173 430.9883 l238.7173 430.9883 lf238.7153 430.9863 m238.7153 430.9863 l238.7153 430.9863 lf238.7153 431.001 m238.7153 431.001 l238.7153 431.001 lf247.896 447.6182 m247.896 448.7578 247.0674 449.6592 246.7759 449.9141 c246.5659 449.8662 l246.876 449.4873 247.4229 448.8535 247.4229 448.0137 c247.4229 446.3613 245.6763 444.9248 243.6831 444.8984 c243.6982 444.7285 243.6973 444.5781 243.6973 444.4502 c243.6973 444.2139 243.6821 443.9824 243.6538 443.7578 c245.916 443.7988 247.896 445.6377 247.896 447.6182 c247.896 447.6182 lf244.7773 433.9355 m243.8115 433.9355 243.6025 434.0371 243.3477 434.0371 c243.1841 434.0371 243.0288 434.0215 243.0288 433.79 c243.0288 433.6289 243.2095 433.3945 243.3726 433.2715 c243.5996 433.4971 243.9116 433.5459 244.415 433.5459 c244.6504 433.5459 244.9712 433.5 245.1128 433.4814 c245.0933 433.3418 245.0649 433.1621 245.0649 432.9092 c245.0649 432.7764 245.0698 432.6211 245.0698 432.457 c245.0698 431.8877 244.9863 431.585 244.7876 431.3564 c244.8306 431.3301 244.9448 431.3066 245.0132 431.3066 c245.3828 431.3066 245.4775 431.4951 245.4775 432.4551 c245.4775 432.7451 245.501 433.0137 245.501 433.083 c246.0176 432.6885 246.5444 431.9854 246.5444 431.4766 c246.7129 431.5635 246.9116 431.8184 246.9116 432.0098 c246.9116 432.3564 246.3325 432.8721 245.7183 433.4941 c245.8037 433.5146 246.0317 433.5801 246.2192 433.5801 c246.7017 433.5801 247.0918 433.5 247.3188 433.2324 c247.4087 433.3301 247.4829 433.624 247.4829 433.79 c247.4829 434.0791 247.3169 434.0693 247.1968 434.0693 c246.6831 434.0693 246.0483 433.9893 245.5938 433.9141 c245.4287 434.1348 244.376 435.5586 244.103 436.3184 c244.0244 436.3457 243.9634 436.3682 243.834 436.3682 c243.5811 436.3682 243.5151 436.1914 243.4497 435.9492 c244.0298 435.2451 244.5879 434.4795 244.7773 433.9355 c244.7773 433.9355 lf239.0132 435.9492 m238.9478 436.1914 238.8833 436.3682 238.6299 436.3682 c238.4995 436.3682 238.4385 436.3457 238.3618 436.3184 c238.0869 435.5586 237.0352 434.1348 236.8691 433.9141 c236.4165 433.9893 235.7798 434.0693 235.2671 434.0693 c235.146 434.0693 234.9805 434.0791 234.9805 433.79 c234.9805 433.624 235.0542 433.3301 235.145 433.2324 c235.3711 433.5 235.7622 433.5801 236.2441 433.5801 c236.4326 433.5801 236.6592 433.5146 236.7446 433.4941 c236.1304 432.8721 235.5513 432.3564 235.5513 432.0098 c235.5513 431.8184 235.751 431.5635 235.9194 431.4766 c235.9194 431.9854 236.4463 432.6885 236.9619 433.083 c236.9619 433.0137 236.9863 432.7451 236.9863 432.4551 c236.9863 431.4951 237.0811 431.3066 237.4507 431.3066 c237.5181 431.3066 237.6323 431.3301 237.6763 431.3564 c237.4775 431.585 237.3936 431.8877 237.3936 432.457 c237.3936 432.6211 237.3999 432.7764 237.3999 432.9092 c237.3999 433.1621 237.3701 433.3418 237.3511 433.4814 c237.4917 433.5 237.8135 433.5459 238.0488 433.5459 c238.5513 433.5459 238.8633 433.4971 239.0913 433.2715 c239.2544 433.3945 239.4351 433.6289 239.4351 433.79 c239.4351 434.0215 239.2798 434.0371 239.1157 434.0371 c238.8604 434.0371 238.6523 433.9355 237.686 433.9355 c237.876 434.4795 238.4331 435.2451 239.0132 435.9492 c239.0132 435.9492 lf235.041 448.0137 m235.041 448.8535 235.5879 449.4873 235.897 449.8662 c235.689 449.9141 l235.3955 449.6592 234.5679 448.7578 234.5679 447.6182 c234.5679 445.624 236.5757 443.7725 238.8589 443.7568 c238.8345 443.9736 238.8203 444.2031 238.8203 444.4502 c238.8203 444.6035 238.8267 444.7549 238.8398 444.8965 c236.8223 444.8965 235.041 446.3457 235.041 448.0137 c235.041 448.0137 lf241.1753 449.5498 m241.2793 449.7891 241.4189 450.0732 241.4189 450.3857 c241.4189 451.251 240.7017 451.6631 239.7417 451.6631 c239.2485 451.6631 238.9995 451.5039 238.9995 451.3438 c238.9995 451.1836 239.1626 450.832 239.2251 450.7236 c239.4023 450.8027 239.7231 450.8965 239.9087 450.8965 c240.5679 450.8965 241.0601 450.1572 241.1753 449.5498 c241.1753 449.5498 lf0 D241.647 450.6563 m242.2085 450.5469 242.5908 451.2637 242.0576 451.3916 c242.1313 451.1553 241.7725 450.9883 y241.6357 451.3047 241.813 451.4854 v241.4863 451.6455 241.4038 451.4512 241.3975 451.25 c241.5259 451.0781 241.6094 450.8779 241.647 450.6563 c241.647 450.6563 lf243.4639 445.7432 m243.5537 445.7373 243.6392 445.7324 243.729 445.7324 c245.3086 445.7324 246.876 446.7539 246.876 448.0635 c246.876 448.7617 246.562 449.25 246.1738 449.791 c245.9463 449.7529 245.7388 449.7314 245.5757 449.7314 c244.8599 449.7314 244.4717 450.1152 244.4434 450.4922 c244.4434 450.8311 244.7192 451.0879 245.1475 451.0879 c245.812 451.0879 247.0234 450.4658 248.2441 450.4658 c248.124 450.375 247.9243 450.2793 247.6836 450.1895 c248.3989 449.5449 248.877 448.6816 249.0596 447.7588 c250.9302 444.7646 l251.2441 444.2646 251.9087 443.2822 252.9092 442.5146 c251.6997 442.5146 250.896 442.4863 249.8735 444.1045 c248.915 445.6387 l248.8442 445.4404 248.7559 445.2471 248.6538 445.0576 c250.5605 442.0049 l250.8784 441.5 251.5347 440.5244 252.5405 439.7539 c251.3301 439.7539 250.5288 439.7246 249.5049 441.3438 c247.8633 443.9717 l247.7407 443.8418 247.6113 443.7139 247.4741 443.5908 c249.791 439.8838 l250.1099 439.376 250.7642 438.4063 251.771 437.6338 c250.5605 437.6338 249.7583 437.6055 248.7344 439.2246 c246.4771 442.8379 l246.3276 442.7432 246.1758 442.6533 246.0195 442.5664 c248.7744 438.1563 l249.0923 437.6504 249.7461 436.6787 250.7539 435.9063 c249.5444 435.9063 248.7407 435.8779 247.7192 437.4971 c244.8813 442.0391 l244.7134 441.9736 244.542 441.9131 244.3691 441.8574 c247.5767 436.7236 l247.8887 436.2266 248.5591 435.2402 249.5547 434.4746 c248.3452 434.4746 247.542 434.4463 246.52 436.0654 c243.1021 441.5361 l242.9976 441.5176 l242.9048 441.2217 242.8403 440.9453 242.8403 440.6699 c242.8403 438.9512 243.9683 437.4336 245.3228 436.2617 c245.2354 436.2246 245.0845 436.21 244.9448 436.21 c244.6665 436.21 244.4854 436.2266 244.3579 436.248 c244.6729 435.5342 245.3462 434.6143 245.6865 434.1377 c246.1299 434.2168 246.7749 434.2803 247.1968 434.2803 c247.6382 434.2803 247.687 434.0215 247.687 433.79 c247.687 433.3896 247.4995 433.0674 247.2822 432.8896 c247.2007 433.0967 247.0356 433.3701 246.2192 433.3701 c246.1367 433.3672 l246.3765 433.1006 247.1226 432.4971 247.1226 432.0098 c247.1226 431.6885 246.7695 431.2061 246.3032 431.2061 c246.3325 431.3096 246.3276 431.4053 246.3276 431.4766 c246.3276 431.8701 245.979 432.3311 245.6846 432.6523 c245.6919 432.5566 245.6885 432.5674 245.6885 432.4551 c245.6885 431.5244 245.605 431.0967 245.0132 431.0967 c244.7236 431.0967 244.5229 431.2559 244.4546 431.3027 c244.8379 431.6572 244.8589 431.9355 244.8589 432.457 c244.855 432.9092 l244.854 433.0283 244.856 433.1855 244.8745 433.3008 c244.6626 433.3301 244.5786 433.3291 244.415 433.3291 c243.5742 433.3955 243.3726 432.959 v243.145 433.167 242.8149 433.4619 242.8149 433.79 c242.8149 434.0049 242.916 434.248 243.3477 434.248 c243.5117 434.248 244.0273 434.1465 244.4585 434.1465 c244.3433 434.4043 243.8267 435.1582 243.3813 435.707 c243.313 435.4951 243.207 435.2637 242.9727 435.0771 c242.9404 435.4297 242.7344 436.541 242.1841 437.1904 c242.1201 436.752 242.0332 436.3008 242.0332 435.3506 c242.0332 433.0371 242.5898 431.3281 243.771 431.001 c243.6177 430.7324 243.293 430.4922 242.9556 430.4922 c242.5234 430.4922 242.2881 430.9814 242.0479 431.4434 c241.9233 431.1016 241.5786 430.2695 241.2314 430.2695 c240.8857 430.2695 240.5405 431.1016 240.416 431.4434 c240.1758 430.9814 239.9404 430.4922 239.5073 430.4922 c239.1709 430.4922 238.8457 430.7324 238.6929 431.001 c239.873 431.3281 240.4302 433.0371 240.4302 435.3506 c240.4302 436.3008 240.3438 436.752 240.2788 437.1904 c239.7295 436.541 239.5225 435.4297 239.4907 435.0771 c239.2563 435.2637 239.1504 435.4951 239.0825 435.707 c238.6367 435.1582 238.1211 434.4043 238.0044 434.1465 c238.437 434.1465 238.9517 434.248 239.1157 434.248 c239.5479 434.248 239.6499 434.0049 239.6499 433.79 c239.6499 433.4619 239.3179 433.167 239.0913 432.959 c238.8887 433.3955 238.0488 433.3291 y237.8857 433.3291 237.8013 433.3301 237.5894 433.3008 c237.6069 433.1855 237.6108 433.0283 237.6079 432.9092 c237.6055 432.457 l237.6055 431.9355 237.625 431.6572 238.0093 431.3027 c237.9409 431.2559 237.7402 431.0967 237.4507 431.0967 c236.8589 431.0967 236.7744 431.5244 236.7744 432.4551 c236.7744 432.5674 236.771 432.5566 236.7793 432.6523 c236.4839 432.3311 236.1362 431.8701 236.1362 431.4766 c236.1362 431.4053 236.1313 431.3096 236.1597 431.2061 c235.6948 431.2061 235.3413 431.6885 235.3413 432.0098 c235.3413 432.4971 236.0884 433.1006 236.3267 433.3672 c236.2441 433.3701 l235.4282 433.3701 235.2622 433.0967 235.1816 432.8896 c234.9634 433.0674 234.7759 433.3896 234.7759 433.79 c234.7759 434.0215 234.8257 434.2803 235.2671 434.2803 c235.6899 434.2803 236.334 434.2168 236.7773 434.1377 c237.1167 434.6143 237.79 435.5342 238.105 436.248 c237.9785 436.2266 237.7983 436.21 237.519 436.21 c237.3794 436.21 237.2275 436.2246 237.1421 436.2617 c238.4951 437.4336 239.6226 438.9512 239.6226 440.6699 c239.6226 440.9453 239.5591 441.2217 239.4653 441.5176 c239.3623 441.5361 l235.9438 436.0654 l234.9214 434.4463 234.1187 434.4746 232.9092 434.4746 c233.9048 435.2402 234.5742 436.2266 234.8867 436.7236 c238.0947 441.8574 l237.9214 441.9131 237.7515 441.9736 237.5825 442.0391 c234.7451 437.4971 l233.7222 435.8779 232.9185 435.9063 231.7104 435.9063 c232.7173 436.6787 233.3706 437.6504 233.6885 438.1563 c236.4448 442.5664 l236.2871 442.6533 236.1353 442.7432 235.9863 442.8379 c233.7285 439.2246 l232.7051 437.6055 231.9033 437.6338 230.6929 437.6338 c231.6997 438.4063 232.3545 439.376 232.6724 439.8838 c234.9888 443.5908 l234.8525 443.7139 234.7227 443.8418 234.6006 443.9717 c232.959 441.3438 l231.9351 439.7246 231.1328 439.7539 229.9233 439.7539 c230.9282 440.5244 231.5854 441.5 231.9033 442.0049 c233.8091 445.0576 l233.708 445.2471 233.6201 445.4404 233.5488 445.6387 c232.5898 444.1045 l231.5669 442.4863 230.7642 442.5146 229.5552 442.5146 c230.5562 443.2822 231.2192 444.2646 231.5342 444.7646 c233.4043 447.7588 l233.5864 448.6816 234.0645 449.5449 234.7798 450.1895 c234.5405 450.2793 234.3398 450.375 234.2192 450.4658 c235.4404 450.4658 236.6509 451.0869 237.3154 451.0869 c237.7451 451.0869 238.0195 450.8311 238.0195 450.4922 c237.9927 450.1152 237.6035 449.7314 236.8872 449.7314 c236.7251 449.7314 236.5176 449.7529 236.2891 449.791 c235.9019 449.25 235.5879 448.7617 235.5879 448.0635 c235.5879 446.7539 237.1543 445.7324 238.7358 445.7324 c238.8247 445.7324 238.9102 445.7373 238.9995 445.7432 c239.3125 446.8037 239.979 447.5 240.5117 448.1807 c239.873 448.4131 239.1616 449.0195 239.1616 449.2939 c239.2422 449.3408 240.4653 448.9561 240.5923 448.9219 c240.6182 448.915 240.6445 448.9131 240.6738 448.9219 c240.8228 448.9668 240.9473 449.1846 240.9473 449.207 c240.8164 449.2285 240.0493 449.3281 239.5244 449.5186 c239.126 449.6641 238.9243 449.9287 238.9243 450.0293 c239.0518 450.0498 239.5376 449.7949 240.25 449.7949 c240.5132 449.7949 240.5649 449.8057 240.8267 449.8379 c240.6426 450.2754 240.2969 450.6455 239.9087 450.6455 c239.752 450.6455 239.4102 450.5479 239.124 450.4053 c238.9253 450.7139 238.75 451.1211 238.75 451.3438 c238.75 451.6055 239.0098 451.9131 239.7417 451.9131 c239.9463 451.9131 240.1372 451.8955 240.3154 451.8623 c240.458 451.8359 240.5781 451.8037 240.7075 451.7529 c240.6973 451.7705 240.6914 451.8096 240.6914 451.8457 c240.6914 451.9473 240.7832 452.0537 241.1274 452.0537 c241.7295 452.0537 242.3472 451.8564 243.1045 451.8564 c243.3008 451.8564 243.4336 451.8623 243.5474 451.9102 c243.4985 451.7598 243.2856 451.5371 243.0903 451.3574 c243.2104 451.1924 243.5239 450.7959 243.5239 450.1543 c243.5239 449.124 242.8447 448.2744 242.8447 447.2324 c242.8447 446.6133 243.3213 446.0684 243.4639 445.7432 c243.4639 445.7432 lf*UUu*u0 O800 Ar271.9888 474.7031 m271.9888 475.2979 271.7441 475.6201 271.0928 475.6201 c270.8901 475.6201 270.1621 475.585 270.1621 474.5278 c270.1621 472.8198 L270.1621 471.7139 270.4839 471.4341 271.0928 471.4341 c271.5552 471.4341 271.8628 471.5601 271.9961 471.6582 c271.9961 473.1699 L271.0649 473.1699 L271.0649 473.73 L272.6401 473.73 L272.6401 471.2729 L272.2271 471.0488 271.7441 470.895 271.0928 470.895 c270.022 470.895 269.5039 471.4482 269.5039 472.8481 c269.5039 474.5068 L269.5039 475.5151 270.022 476.1592 271.0928 476.1592 c272.1851 476.1592 272.7031 475.7598 272.6611 474.7031 C271.9888 474.7031 lf*U*u273.8438 471 m273.8438 476.0542 L276.4478 476.0542 L276.4478 475.4941 L274.4878 475.4941 L274.4878 473.8701 L276.3081 473.8701 L276.3081 473.3101 L274.4878 473.3101 L274.4878 471.5601 L276.4897 471.5601 L276.4897 471 L273.8438 471 lf*U*u277.2949 471 m277.2949 476.0542 L279.8008 476.0542 L279.8008 475.4941 L277.939 475.4941 L277.939 473.8701 L279.7031 473.8701 L279.7031 473.3101 L277.939 473.3101 L277.939 471 L277.2949 471 lf*U*u280.4307 472.8481 m280.4307 474.5068 L280.4307 475.5151 280.9487 476.1592 282.02 476.1592 c283.0908 476.1592 283.6089 475.5151 283.6089 474.5068 c283.6089 472.8481 L283.6089 471.4482 283.0908 470.895 282.02 470.895 c280.9487 470.895 280.4307 471.4482 280.4307 472.8481 cf281.7397 476.6489 m281.082 476.6489 L281.082 477.377 L281.7397 477.377 L281.7397 476.6489 lf1 D282.9507 472.8198 m282.9507 474.5278 L282.9507 475.585 282.2227 475.6201 282.02 475.6201 c281.8169 475.6201 281.0889 475.585 281.0889 474.5278 c281.0889 472.8198 L281.0889 471.7139 281.4106 471.4341 282.02 471.4341 c282.6289 471.4341 282.9507 471.7139 282.9507 472.8198 cf282.9717 476.6489 m282.314 476.6489 L282.314 477.377 L282.9717 477.377 L282.9717 476.6489 lf*U*u0 D285.3589 473.3242 m285.3589 471 L284.7148 471 L284.7148 476.0542 L286.458 476.0542 L287.354 476.0542 287.6689 475.4238 287.6689 474.7939 c287.6689 474.1992 287.3398 473.7441 286.7446 473.6392 c286.7446 473.625 L287.3257 473.5342 287.5356 473.3379 287.5708 472.3232 c287.5776 472.106 287.6479 471.3149 287.7456 471 c287.0737 471 L286.8916 471.3501 286.9336 472.0078 286.8779 472.6802 c286.8286 473.2959 286.3315 473.3242 286.1147 473.3242 C285.3589 473.3242 lf1 D285.3589 473.8838 m286.3247 473.8838 L286.7866 473.8838 287.0107 474.2832 287.0107 474.7241 c287.0107 475.0879 286.8286 475.4941 286.3315 475.4941 c285.3589 475.4941 L285.3589 473.8838 lf*U*u0 D288.6348 476.0542 m290.189 476.0542 L290.833 476.0542 291.2949 475.8228 291.5469 475.2842 c291.75 474.8569 291.771 473.8491 291.771 473.688 c291.771 472.6099 291.6729 471.9868 291.4629 471.6509 c291.1899 471.2168 290.6787 471 289.7969 471 c288.6348 471 L288.6348 476.0542 lf1 D289.2788 471.5601 m289.8877 471.5601 L290.7837 471.5601 291.1128 471.896 291.1128 473.0718 c291.1128 474.0938 L291.1128 475.1162 290.7979 475.4941 290.126 475.4941 c289.2788 475.4941 L289.2788 471.5601 lf*U*u0 D292.8979 471 m292.8979 476.0542 L295.502 476.0542 L295.502 475.4941 L293.5415 475.4941 L293.5415 473.8701 L295.3618 473.8701 L295.3618 473.3101 L293.5415 473.3101 L293.5415 471.5601 L295.5439 471.5601 L295.5439 471 L292.8979 471 lf*U*u297.0278 473.3242 m297.0278 471 L296.3838 471 L296.3838 476.0542 L298.127 476.0542 L299.0229 476.0542 299.3379 475.4238 299.3379 474.7939 c299.3379 474.1992 299.0088 473.7441 298.4136 473.6392 c298.4136 473.625 L298.9946 473.5342 299.2046 473.3379 299.2397 472.3232 c299.2466 472.106 299.3169 471.3149 299.4146 471 c298.7427 471 L298.5605 471.3501 298.6025 472.0078 298.5469 472.6802 c298.4976 473.2959 298.0005 473.3242 297.7837 473.3242 C297.0278 473.3242 lf1 D297.0278 473.8838 m297.9937 473.8838 L298.4556 473.8838 298.6797 474.2832 298.6797 474.7241 c298.6797 475.0879 298.4976 475.4941 298.0005 475.4941 c297.0278 475.4941 L297.0278 473.8838 lf*U*u0 D303.1245 476.0542 m303.1245 475.4941 L301.7949 475.4941 L301.7949 471 L301.1509 471 L301.1509 475.4941 L299.8208 475.4941 L299.8208 476.0542 L303.1245 476.0542 lf*U*u307.1006 471 m306.3306 471 L304.8677 476.0542 L305.5674 476.0542 L306.7227 471.6089 L306.7368 471.6089 L307.9194 476.0542 L308.5776 476.0542 L307.1006 471 lf*U*u309.2148 472.8481 m309.2148 474.5068 L309.2148 475.5151 309.7324 476.1592 310.8037 476.1592 c311.8745 476.1592 312.3926 475.5151 312.3926 474.5068 c312.3926 472.8481 L312.3926 471.4482 311.8745 470.895 310.8037 470.895 c309.7324 470.895 309.2148 471.4482 309.2148 472.8481 cf1 D311.7344 472.8198 m311.7344 474.5278 L311.7344 475.585 311.0068 475.6201 310.8037 475.6201 c310.6006 475.6201 309.8726 475.585 309.8726 474.5278 c309.8726 472.8198 L309.8726 471.7139 310.1948 471.4341 310.8037 471.4341 c311.4126 471.4341 311.7344 471.7139 311.7344 472.8198 cf*U*u0 D314.1216 471 m313.5195 471 L313.5195 476.0542 L314.5625 476.0542 L315.8364 471.812 L315.8506 471.812 L317.1387 476.0542 L318.2026 476.0542 L318.2026 471 L317.5586 471 L317.5586 475.4941 L317.5444 475.4941 L316.1304 471 L315.5215 471 L314.1357 475.4941 L314.1216 475.4941 L314.1216 471 lf*UUU1 Ap381.7446 369.9829 m213.708 369.9829 L213.708 496.3955 L381.7446 496.3955 L381.7446 369.9829 LnLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF